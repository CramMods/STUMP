using CramMods.STUMP.Variants;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Environments;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CramMods.STUMP
{
    public class Program
    {
        public static Lazy<VariantBuilder> VariantsSetting = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings("Variants", "Variants.json", out VariantsSetting)
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "STUMP.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            List<string> testNames = new() { "Narfi", "Gerdur", "Delphine", "Sigrid", "Haelga", "Sven", "Hilde" };
            List<INpcGetter> npcs = state.LoadOrder.PriorityOrder.Npc().WinningOverrides().Where(n => (n.EditorID != null) && testNames.Contains(n.EditorID)).ToList();

            List<Variant> variants = VariantsSetting.Value.Simplify();

            IGameEnvironmentState<ISkyrimMod, ISkyrimModGetter> env = new GameEnvironmentState<ISkyrimMod, ISkyrimModGetter>(
                state.GameRelease,
                state.DataFolderPath,
                state.LoadOrderFilePath,
                null,
                state.LoadOrder,
                state.LinkCache );

            NARFI.NARFI narfi = new(env);
            narfi.RegisterFieldGetter(typeof(NARFI.FieldValueGetters.Skyrim.NPC));

            Dictionary<INpcGetter, Variant> overrides = npcs
                .Select(n => new KeyValuePair<INpcGetter, Variant?>(n, Chooser.Choose(variants, n, narfi)))
                .Where(i => i.Value != null)
                .ToDictionary(i => i.Key, i => i.Value!);

            Console.WriteLine();
            Console.WriteLine("Press any key to exit");
            Console.ReadKey();
        }
    }
}
