using CramMods.NARFI;
using CramMods.NARFI.Skyrim;
using CramMods.STUMP.Settings;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Environments;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CramMods.STUMP
{
    public class Program
    {
        private static List<string> _testNpcNames = new() { "Narfi", "Gerdur", "Delphine", "Sigrid", "Haelga", "Sven", "Hilde" };
        private static Dictionary<string, string[]> _raceGroupIds = new() 
        {
            { "Argonian", new[] { "ArgonianRace", "ArgonianRaceVampire" } },
            { "Breton", new[] { "BretonRace", "BretonRaceVampire" } },
            { "DarkElf", new[] { "DarkElfRace", "DarkElfRaceVampire" } },
            { "Elder", new[] { "ElderRace", "ElderRaceVampire" } },
            { "HighElf", new[] { "HighElfRace", "HighElfRaceVampire" } },
            { "Imperial", new[] { "ImperialRace", "ImperialRaceVampire" } },
            { "Khajiit", new[] { "KhajiitRace", "KhajiitRaceVampire" } },
            { "Nord", new[] { "NordRace", "NordRaceVampire" } },
            { "Orc", new[] { "OrcRace", "OrcRaceVampire" } },
            { "Redguard", new[] { "RedguardRace", "RedguardRaceVampire" } },
            { "SnowElf", new[] { "SnowElfRace", "SnowElfRaceVampire" } },
            { "WoodElf", new[] { "WoodElfRace", "WoodElfRaceVampire" } },

            { "Human", new[] { "Breton", "Elder", "Imperial", "Nord", "Redguard" } },
            { "Elf", new[] { "DarkElf", "HighElf", "SnowElf", "WoodElf" } },
            { "Humanoid", new[] { "Human", "Elf", "Orc" } },
            { "Beast", new[] { "Argonian", "Khajiit" } },
            { "All", new[] { "Humanoid", "Beast" } },
        };


        public static Lazy<VariantSettings> VariantSettings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings("Variants", "Variants.json", out VariantSettings, true)
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "STUMP.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            /*
            List<INpcGetter> npcs = state.LoadOrder.PriorityOrder.Npc().WinningOverrides().Where(npc => _testNpcNames.Any(name => npc.EditorID?.Equals(name, StringComparison.InvariantCultureIgnoreCase) ?? false)).ToList();
            IGameEnvironmentState<ISkyrimMod, ISkyrimModGetter> env = new GameEnvironmentState<ISkyrimMod, ISkyrimModGetter>(state.GameRelease, state.DataFolderPath, state.LoadOrderFilePath, null, state.LoadOrder, state.LinkCache);
            List<RaceGroup> raceGroups = RaceGroup.FromIdDictionary(_raceGroupIds, env.LoadOrder.PriorityOrder.Race().WinningOverrides()).ToList();

            SkyrimPlugin skyrimPlugin = new();
            skyrimPlugin.SetRaceGroups(raceGroups);

            NARFI.NARFI narfi = new(env);
            narfi.RegisterPlugin(skyrimPlugin);
            */

            var x = VariantSettings.Value;
            var y = x.Flatten();

            Console.WriteLine();
            Console.WriteLine("Press any key to exit");
            Console.ReadKey();
        }
    }
}
