using CramMods.NARFI;
using CramMods.NARFI.FieldValueGetters;
using CramMods.NARFI.Skyrim;
using CramMods.STUMP.Settings;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Environments;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace CramMods.STUMP
{
    public class Program
    {
        private static List<string> _testNpcNames = new() { "Narfi", "Gerdur", "Delphine", "Sigrid", "Haelga", "Sven", "Hilde" };

        public static Lazy<VariantSettings> VariantSettings = null!;
        public static Lazy<RaceGroupSettings> RaceGroupSettings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings("Variants", "Variants.json", out VariantSettings, true)
                .SetAutogeneratedSettings("RaceGroups", "RaceGroups.json", out RaceGroupSettings, true)
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "STUMP.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            IGameEnvironmentState<ISkyrimMod, ISkyrimModGetter> env = new GameEnvironmentState<ISkyrimMod, ISkyrimModGetter>(state.GameRelease, state.DataFolderPath, state.LoadOrderFilePath, null, state.LoadOrder, state.LinkCache);

            List<INpcGetter> npcs = state.LoadOrder.PriorityOrder.Npc().WinningOverrides().ToList();
            List<IRaceGetter> races = state.LoadOrder.PriorityOrder.Race().WinningOverrides().ToList();

            List<RaceGroup> raceGroups = RaceGroupSettings.Value.Flatten(races).ToList();
            List<VariantSettings> variants = VariantSettings.Value.Flatten();

            /*
            SkyrimPlugin skyrimPlugin = new();
            skyrimPlugin.SetRaceGroups(raceGroups);

            NARFI.NARFI narfi = new(env);
            narfi.RegisterPlugin(skyrimPlugin);

            Dictionary<INpcGetter, VariantSettings> matches = VariantUtils.MatchVariants(npcs, variants, narfi, WriteMatchProgress);

            List<VariantSettings> distinctVariants = matches.Values.DistinctBy(v => v.ToString()).ToList();
            Console.WriteLine($"There are {distinctVariants.Count} distinct variants");

            Console.WriteLine();
            */

            INpcGetter npcBase = npcs.First(n => n.EditorID == "Gerdur");
            Npc npc = state.PatchMod.Npcs.GetOrAddAsOverride(npcBase);

            BodyBuilder skinBuilder = new(state.PatchMod);
            IArmor skin = skinBuilder.BuildSkin(npc, variants[61]);

            npc.WornArmor = skin.AsNullableLink();

            //Console.WriteLine();
            //Console.WriteLine("Press any key to exit");
            //Console.ReadKey();
        }

        private static VariantUtils.MatchVariantsCallback WriteMatchProgress = (int total, int complete, int matched) =>
        {
            int percentComplete = (int)((float)complete / total * 100);
            Console.Write($"Matching NPCs... [ {complete} of {total} ]  {percentComplete} %\r");

            if (total == complete)
            {
                Console.WriteLine($"\r\nFound matches for {matched} of {total} NPCs");
            }
        };
    }
}
